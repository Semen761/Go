package main

import (
	"fmt"
	"io/ioutil"
	"math"
	"math/rand"
	"os"
	"sync"
	"time"
)

const (
	maxNumbers  = 50            // Максимальное число, которое обработает программа
	file_Output = "output2.txt" // Имя выходного файла
)

func main() {
	rand.Seed(time.Now().UnixNano())

	// Канал для передачи чисел
	numberChannel := make(chan int)

	// Группа ожидания для горутин
	var wg sync.WaitGroup
	wg.Add(2)

	// Открываем файл
	file, err := os.OpenFile(file_Output, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Println("Ошибка открытия файла:", err)
		return
	}
	defer file.Close()

	// Горутина для создания рандомных чисел
	go func() {
		defer wg.Done()
		for i := 0; i < maxNumbers; i++ {
			randomNumber := rand.Intn(int(math.Pow(10, 2))) + 1 // Числа от 1 до 100
			numberChannel <- randomNumber
		}
		close(numberChannel)
	}() // <- Закрываем объявление первой горутины здесь

	// Горутина обработки чисел полученных из 1-ой горутины
	go func() {
		defer wg.Done()
		for number := range numberChannel {
			if number%2 == 0 {
				line := fmt.Sprintf("divisibleByTwo %d\n", number)
				_, err := file.WriteString(line)
				if err != nil {
					fmt.Println("Ошибка записи в файл:", err)
				}
			} else if number%3 == 0 {
				line := fmt.Sprintf("divisibleByThree %d\n", number)
				_, err := file.WriteString(line)
				if err != nil {
					fmt.Println("Ошибка записи в файл:", err)
				}
			} else if number%4 == 0 {
				line := fmt.Sprintf("divisibleByFour %d\n", number)
				_, err := file.WriteString(line)
				if err != nil {
					fmt.Println("Ошибка записи в файл:", err)
				}
			}
			// Небольшая пауза для наглядности
			time.Sleep(time.Duration(rand.Intn(50)) * time.Millisecond)
		}
	}()

	wg.Wait()

	// Выводим содержимое файла
	data, err := ioutil.ReadFile(file_Output)
	if err != nil {
		fmt.Println("Ошибка чтения файла:", err)
		return
	}
	fmt.Println("Содержимое файла:")
	fmt.Println(string(data))
}

