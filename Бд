package main

import (
	"database/sql"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	_ "github.com/lib/pq" // Драйвер для PostgreSQL
)

// Структуры для данных из БД
type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Car struct {
	ID       int    `json:"id"`
	Model    string `json:"model"`
	EngineID int    `json:"engine_id"`
}

type Engine struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

// Подключение к БД
func connectDB() (*sql.DB, error) {
	connStr := "user=postgres password=postgres dbname=postgres sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		return nil, err
	}
	return db, nil
}

// Хэндлеры для API

// Получить все машины пользователя
func getUserCars(c echo.Context) error {
	userID := c.Param("userID")
	db, err := connectDB()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer db.Close()

	rows, err := db.Query("SELECT c.id, c.model, c.engine_id FROM cars c JOIN user_cars uc ON c.id = uc.car_id WHERE uc.user_id = $1", userID)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer rows.Close()

	cars := []Car{}
	for rows.Next() {
		car := Car{}
		err := rows.Scan(&car.ID, &car.Model, &car.EngineID)
		if err != nil {
			return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
		}
		cars = append(cars, car)
	}

	return c.JSON(http.StatusOK, cars)
}

// Получить все двигатели пользователя (без повторений)
func getUserEngines(c echo.Context) error {
	userID := c.Param("userID")
	db, err := connectDB()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer db.Close()

	rows, err := db.Query(`
        SELECT DISTINCT e.id, e.name
        FROM engines e
        JOIN cars c ON e.id = c.engine_id
        JOIN user_cars uc ON c.id = uc.car_id
        WHERE uc.user_id = $1`, userID)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer rows.Close()

	engines := []Engine{}
	for rows.Next() {
		engine := Engine{}
		err := rows.Scan(&engine.ID, &engine.Name)
		if err != nil {
			return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
		}
		engines = append(engines, engine)
	}

	return c.JSON(http.StatusOK, engines)
}

// Получить двигатель конкретной машины
func getCarEngine(c echo.Context) error {
	carID := c.Param("carID")
	db, err := connectDB()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer db.Close()

	engine := Engine{}
	err = db.QueryRow("SELECT e.id, e.name FROM engines e JOIN cars c ON e.id = c.engine_id WHERE c.id = $1", carID).
		Scan(&engine.ID, &engine.Name)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}

	return c.JSON(http.StatusOK, engine)
}

// Получить двигатели по марке машины
func getEnginesByCarModel(c echo.Context) error {
	carModel := c.Param("carModel")
	db, err := connectDB()
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer db.Close()

	rows, err := db.Query("SELECT e.id, e.name FROM engines e JOIN cars c ON e.id = c.engine_id WHERE c.model = $1", carModel)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	defer rows.Close()

	engines := []Engine{}
	for rows.Next() {
		engine := Engine{}
		err := rows.Scan(&engine.ID, &engine.Name)
		if err != nil {
			return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
		}
		engines = append(engines, engine)
	}

	return c.JSON(http.StatusOK, engines)
}

func main() {
	e := echo.New()

	// Регистрация маршрутов
	e.GET("/users/:userID/cars", getUserCars)
	e.GET("/users/:userID/engines", getUserEngines)
	e.GET("/cars/:carID/engine", getCarEngine)
	e.GET("/cars/model/:carModel/engines", getEnginesByCarModel)

	fmt.Println("Server started on port 8080")
	e.Logger.Fatal(e.Start(":8080"))
}
